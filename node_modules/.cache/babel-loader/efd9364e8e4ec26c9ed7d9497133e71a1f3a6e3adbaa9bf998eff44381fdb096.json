{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchCars, addFavorite, deleteFavorite } from \"./operations\";\nconst handlePending = state => {\n  state.isLoading = true;\n};\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\nexport const sliceCars = createSlice({\n  name: \"advert\",\n  initialState: {\n    cars: [],\n    favoriteList: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCars.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchCars.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      state.cars = action.payload;\n    }).addCase(fetchCars.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }).addCase(addFavorite.pending, handlePending).addCase(addFavorite.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      const existingCar = state.favoriteList.find(car => car.id === action.payload.id);\n      console.log(existingCar);\n      if (!existingCar) {\n        state.favoriteList.push(action.payload);\n      }\n    }).addCase(addFavorite.rejected, handleRejected).addCase(deleteFavorite.pending, handlePending).addCase(deleteFavorite.fulfilled, (state, action) => {\n      state.favoriteList = state.favoriteList.filter(car => car.id !== action.payload);\n    }).addCase(deleteFavorite.rejected, handleRejected);\n  }\n});\nexport const tasksReducer = sliceCars.reducer;\nexport const {\n  fetchingInProgress,\n  fetchingSuccess,\n  fetchingError\n} = sliceCars.actions;","map":{"version":3,"names":["createSlice","fetchCars","addFavorite","deleteFavorite","handlePending","state","isLoading","handleRejected","action","error","payload","sliceCars","name","initialState","cars","favoriteList","reducers","extraReducers","builder","addCase","pending","fulfilled","rejected","existingCar","find","car","id","console","log","push","filter","tasksReducer","reducer","fetchingInProgress","fetchingSuccess","fetchingError","actions"],"sources":["D:/OneDrive/Рабочий стол/js/Rent-cars/src/Redux/sliceCars.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { fetchCars, addFavorite,deleteFavorite } from \"./operations\";\n\nconst handlePending = (state) => {\n  state.isLoading = true;\n};\n\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nexport const sliceCars = createSlice({\n  name: \"advert\",\n  initialState: {\n    cars: [],\n    favoriteList: [],\n    isLoading: false,\n    error: null,\n  },\n  reducers: {},\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCars.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchCars.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.error = null;\n        state.cars = action.payload;\n      })\n      .addCase(fetchCars.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      .addCase(addFavorite.pending, handlePending)\n      .addCase(addFavorite.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.error = null;\n        const existingCar = state.favoriteList.find(\n          (car) => car.id === action.payload.id\n        );\n        console.log(existingCar);\n        if (!existingCar) {\n          state.favoriteList.push(action.payload);\n        }\n      })\n      .addCase(addFavorite.rejected, handleRejected)\n    .addCase(deleteFavorite.pending, handlePending)\n    .addCase(deleteFavorite.fulfilled, (state, action) => {\n      \n        state.favoriteList = state.favoriteList.filter(\n          (car) => car.id !== action.payload\n        );\n      })\n    .addCase(deleteFavorite.rejected, handleRejected)\n    }\n});\n\nexport const tasksReducer = sliceCars.reducer;\nexport const { fetchingInProgress, fetchingSuccess, fetchingError } =\n  sliceCars.actions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,SAAS,EAAEC,WAAW,EAACC,cAAc,QAAQ,cAAc;AAEpE,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/BA,KAAK,CAACC,SAAS,GAAG,IAAI;AACxB,CAAC;AAED,MAAMC,cAAc,GAAGA,CAACF,KAAK,EAAEG,MAAM,KAAK;EACxCH,KAAK,CAACC,SAAS,GAAG,KAAK;EACvBD,KAAK,CAACI,KAAK,GAAGD,MAAM,CAACE,OAAO;AAC9B,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAAC;EACnCY,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,YAAY,EAAE,EAAE;IAChBT,SAAS,EAAE,KAAK;IAChBG,KAAK,EAAE;EACT,CAAC;EACDO,QAAQ,EAAE,CAAC,CAAC;EAEZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,SAAS,CAACmB,OAAO,EAAGf,KAAK,IAAK;MACrCA,KAAK,CAACC,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDa,OAAO,CAAClB,SAAS,CAACoB,SAAS,EAAE,CAAChB,KAAK,EAAEG,MAAM,KAAK;MAC/CH,KAAK,CAACC,SAAS,GAAG,KAAK;MACvBD,KAAK,CAACI,KAAK,GAAG,IAAI;MAClBJ,KAAK,CAACS,IAAI,GAAGN,MAAM,CAACE,OAAO;IAC7B,CAAC,CAAC,CACDS,OAAO,CAAClB,SAAS,CAACqB,QAAQ,EAAE,CAACjB,KAAK,EAAEG,MAAM,KAAK;MAC9CH,KAAK,CAACC,SAAS,GAAG,KAAK;MACvBD,KAAK,CAACI,KAAK,GAAGD,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC,CACDS,OAAO,CAACjB,WAAW,CAACkB,OAAO,EAAEhB,aAAa,CAAC,CAC3Ce,OAAO,CAACjB,WAAW,CAACmB,SAAS,EAAE,CAAChB,KAAK,EAAEG,MAAM,KAAK;MACjDH,KAAK,CAACC,SAAS,GAAG,KAAK;MACvBD,KAAK,CAACI,KAAK,GAAG,IAAI;MAClB,MAAMc,WAAW,GAAGlB,KAAK,CAACU,YAAY,CAACS,IAAI,CACxCC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKlB,MAAM,CAACE,OAAO,CAACgB,EACrC,CAAC;MACDC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;MACxB,IAAI,CAACA,WAAW,EAAE;QAChBlB,KAAK,CAACU,YAAY,CAACc,IAAI,CAACrB,MAAM,CAACE,OAAO,CAAC;MACzC;IACF,CAAC,CAAC,CACDS,OAAO,CAACjB,WAAW,CAACoB,QAAQ,EAAEf,cAAc,CAAC,CAC/CY,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAEhB,aAAa,CAAC,CAC9Ce,OAAO,CAAChB,cAAc,CAACkB,SAAS,EAAE,CAAChB,KAAK,EAAEG,MAAM,KAAK;MAElDH,KAAK,CAACU,YAAY,GAAGV,KAAK,CAACU,YAAY,CAACe,MAAM,CAC3CL,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKlB,MAAM,CAACE,OAC7B,CAAC;IACH,CAAC,CAAC,CACHS,OAAO,CAAChB,cAAc,CAACmB,QAAQ,EAAEf,cAAc,CAAC;EACjD;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMwB,YAAY,GAAGpB,SAAS,CAACqB,OAAO;AAC7C,OAAO,MAAM;EAAEC,kBAAkB;EAAEC,eAAe;EAAEC;AAAc,CAAC,GACjExB,SAAS,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}